// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nz.co.jsrsolutions.tideservice.core.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nz.co.jsrsolutions.tideservice.core.domain.AbstractUser;
import nz.co.jsrsolutions.tideservice.core.domain.TidePrediction;
import nz.co.jsrsolutions.tideservice.core.domain.TidePredictionDataOnDemand;
import nz.co.jsrsolutions.tideservice.core.domain.TidePredictionDay;
import nz.co.jsrsolutions.tideservice.core.domain.TidePredictionDayDataOnDemand;
import nz.co.jsrsolutions.tideservice.core.reference.TidePredictionType;
import nz.co.jsrsolutions.tideservice.core.repository.TidePredictionRepository;
import nz.co.jsrsolutions.tideservice.core.service.TidePredictionService;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TidePredictionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TidePredictionDataOnDemand: @Component;
    
    private Random TidePredictionDataOnDemand.rnd = new SecureRandom();
    
    private List<TidePrediction> TidePredictionDataOnDemand.data;
    
    @Autowired
    private TidePredictionDayDataOnDemand TidePredictionDataOnDemand.tidePredictionDayDataOnDemand;
    
    @Autowired
    TidePredictionService TidePredictionDataOnDemand.tidePredictionService;
    
    @Autowired
    TidePredictionRepository TidePredictionDataOnDemand.tidePredictionRepository;
    
    public TidePrediction TidePredictionDataOnDemand.getNewTransientTidePrediction(int index) {
        TidePrediction obj = new TidePrediction();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setHeight(obj, index);
        setIsActive(obj, index);
        setLastModifiedBy(obj, index);
        setLastModifiedDate(obj, index);
        setTidePredictionDay(obj, index);
        setTidePredictionType(obj, index);
        setUtcTime(obj, index);
        return obj;
    }
    
    public void TidePredictionDataOnDemand.setCreatedBy(TidePrediction obj, int index) {
        AbstractUser createdBy = null;
        obj.setCreatedBy(createdBy);
    }
    
    public void TidePredictionDataOnDemand.setCreatedDate(TidePrediction obj, int index) {
        DateTime createdDate = null;
        obj.setCreatedDate(createdDate);
    }
    
    public void TidePredictionDataOnDemand.setHeight(TidePrediction obj, int index) {
        Float height = new Integer(index).floatValue();
        obj.setHeight(height);
    }
    
    public void TidePredictionDataOnDemand.setIsActive(TidePrediction obj, int index) {
        Boolean isActive = Boolean.TRUE;
        obj.setIsActive(isActive);
    }
    
    public void TidePredictionDataOnDemand.setLastModifiedBy(TidePrediction obj, int index) {
        AbstractUser lastModifiedBy = null;
        obj.setLastModifiedBy(lastModifiedBy);
    }
    
    public void TidePredictionDataOnDemand.setLastModifiedDate(TidePrediction obj, int index) {
        DateTime lastModifiedDate = null;
        obj.setLastModifiedDate(lastModifiedDate);
    }
    
    public void TidePredictionDataOnDemand.setTidePredictionDay(TidePrediction obj, int index) {
        TidePredictionDay tidePredictionDay = tidePredictionDayDataOnDemand.getRandomTidePredictionDay();
        obj.setTidePredictionDay(tidePredictionDay);
    }
    
    public void TidePredictionDataOnDemand.setTidePredictionType(TidePrediction obj, int index) {
        TidePredictionType tidePredictionType = TidePredictionType.class.getEnumConstants()[0];
        obj.setTidePredictionType(tidePredictionType);
    }
    
    public void TidePredictionDataOnDemand.setUtcTime(TidePrediction obj, int index) {
        DateTime utcTime = null;
        obj.setUtcTime(utcTime);
    }
    
    public TidePrediction TidePredictionDataOnDemand.getSpecificTidePrediction(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TidePrediction obj = data.get(index);
        Long id = obj.getId();
        return tidePredictionService.findTidePrediction(id);
    }
    
    public TidePrediction TidePredictionDataOnDemand.getRandomTidePrediction() {
        init();
        TidePrediction obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return tidePredictionService.findTidePrediction(id);
    }
    
    public boolean TidePredictionDataOnDemand.modifyTidePrediction(TidePrediction obj) {
        return false;
    }
    
    public void TidePredictionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = tidePredictionService.findTidePredictionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TidePrediction' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TidePrediction>();
        for (int i = 0; i < 10; i++) {
            TidePrediction obj = getNewTransientTidePrediction(i);
            try {
                tidePredictionService.saveTidePrediction(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            tidePredictionRepository.flush();
            data.add(obj);
        }
    }
    
}
