// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nz.co.jsrsolutions.tideservice.core.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nz.co.jsrsolutions.tideservice.core.domain.AbstractUser;
import nz.co.jsrsolutions.tideservice.core.domain.GeoLocation;
import nz.co.jsrsolutions.tideservice.core.domain.Port;
import nz.co.jsrsolutions.tideservice.core.domain.PortDataOnDemand;
import nz.co.jsrsolutions.tideservice.core.domain.SubArea;
import nz.co.jsrsolutions.tideservice.core.domain.SubAreaDataOnDemand;
import nz.co.jsrsolutions.tideservice.core.repository.PortRepository;
import nz.co.jsrsolutions.tideservice.core.service.PortService;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PortDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PortDataOnDemand: @Component;
    
    private Random PortDataOnDemand.rnd = new SecureRandom();
    
    private List<Port> PortDataOnDemand.data;
    
    @Autowired
    private SubAreaDataOnDemand PortDataOnDemand.subAreaDataOnDemand;
    
    @Autowired
    PortService PortDataOnDemand.portService;
    
    @Autowired
    PortRepository PortDataOnDemand.portRepository;
    
    public Port PortDataOnDemand.getNewTransientPort(int index) {
        Port obj = new Port();
        setGeoLocation(obj, index);
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setDescription(obj, index);
        setExternalId(obj, index);
        setIsActive(obj, index);
        setIsGeoCoded(obj, index);
        setLastModifiedBy(obj, index);
        setLastModifiedDate(obj, index);
        setName(obj, index);
        setSubArea(obj, index);
        return obj;
    }
    
    public void PortDataOnDemand.setGeoLocation(Port obj, int index) {
        GeoLocation embeddedClass = new GeoLocation();
        setGeoLocationLatitude(embeddedClass, index);
        setGeoLocationLongitude(embeddedClass, index);
        obj.setGeoLocation(embeddedClass);
    }
    
    public void PortDataOnDemand.setGeoLocationLatitude(GeoLocation obj, int index) {
        Long latitude = new Integer(index).longValue();
        obj.setLatitude(latitude);
    }
    
    public void PortDataOnDemand.setGeoLocationLongitude(GeoLocation obj, int index) {
        Long longitude = new Integer(index).longValue();
        obj.setLongitude(longitude);
    }
    
    public void PortDataOnDemand.setCreatedBy(Port obj, int index) {
        AbstractUser createdBy = null;
        obj.setCreatedBy(createdBy);
    }
    
    public void PortDataOnDemand.setCreatedDate(Port obj, int index) {
        DateTime createdDate = null;
        obj.setCreatedDate(createdDate);
    }
    
    public void PortDataOnDemand.setDescription(Port obj, int index) {
        String description = "description_" + index;
        if (description.length() > 255) {
            description = description.substring(0, 255);
        }
        obj.setDescription(description);
    }
    
    public void PortDataOnDemand.setExternalId(Port obj, int index) {
        String externalId = "externalId_" + index;
        if (externalId.length() > 30) {
            externalId = new Random().nextInt(10) + externalId.substring(1, 30);
        }
        obj.setExternalId(externalId);
    }
    
    public void PortDataOnDemand.setIsActive(Port obj, int index) {
        Boolean isActive = Boolean.TRUE;
        obj.setIsActive(isActive);
    }
    
    public void PortDataOnDemand.setIsGeoCoded(Port obj, int index) {
        Boolean isGeoCoded = true;
        obj.setIsGeoCoded(isGeoCoded);
    }
    
    public void PortDataOnDemand.setLastModifiedBy(Port obj, int index) {
        AbstractUser lastModifiedBy = null;
        obj.setLastModifiedBy(lastModifiedBy);
    }
    
    public void PortDataOnDemand.setLastModifiedDate(Port obj, int index) {
        DateTime lastModifiedDate = null;
        obj.setLastModifiedDate(lastModifiedDate);
    }
    
    public void PortDataOnDemand.setName(Port obj, int index) {
        String name = "name_" + index;
        if (name.length() > 60) {
            name = name.substring(0, 60);
        }
        obj.setName(name);
    }
    
    public void PortDataOnDemand.setSubArea(Port obj, int index) {
        SubArea subArea = subAreaDataOnDemand.getRandomSubArea();
        obj.setSubArea(subArea);
    }
    
    public Port PortDataOnDemand.getSpecificPort(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Port obj = data.get(index);
        Long id = obj.getId();
        return portService.findPort(id);
    }
    
    public Port PortDataOnDemand.getRandomPort() {
        init();
        Port obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return portService.findPort(id);
    }
    
    public boolean PortDataOnDemand.modifyPort(Port obj) {
        return false;
    }
    
    public void PortDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = portService.findPortEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Port' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Port>();
        for (int i = 0; i < 10; i++) {
            Port obj = getNewTransientPort(i);
            try {
                portService.savePort(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            portRepository.flush();
            data.add(obj);
        }
    }
    
}
