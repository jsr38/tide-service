// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nz.co.jsrsolutions.tideservice.core.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nz.co.jsrsolutions.tideservice.core.domain.AbstractUser;
import nz.co.jsrsolutions.tideservice.core.domain.Client;
import nz.co.jsrsolutions.tideservice.core.domain.ClientDataOnDemand;
import nz.co.jsrsolutions.tideservice.core.repository.ClientRepository;
import nz.co.jsrsolutions.tideservice.core.service.ClientService;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ClientDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ClientDataOnDemand: @Component;
    
    private Random ClientDataOnDemand.rnd = new SecureRandom();
    
    private List<Client> ClientDataOnDemand.data;
    
    @Autowired
    ClientService ClientDataOnDemand.clientService;
    
    @Autowired
    ClientRepository ClientDataOnDemand.clientRepository;
    
    public Client ClientDataOnDemand.getNewTransientClient(int index) {
        Client obj = new Client();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setFirstName(obj, index);
        setIsActive(obj, index);
        setLastModifiedBy(obj, index);
        setLastModifiedDate(obj, index);
        setLastName(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void ClientDataOnDemand.setCreatedBy(Client obj, int index) {
        AbstractUser createdBy = null;
        obj.setCreatedBy(createdBy);
    }
    
    public void ClientDataOnDemand.setCreatedDate(Client obj, int index) {
        DateTime createdDate = null;
        obj.setCreatedDate(createdDate);
    }
    
    public void ClientDataOnDemand.setFirstName(Client obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 100) {
            firstName = firstName.substring(0, 100);
        }
        obj.setFirstName(firstName);
    }
    
    public void ClientDataOnDemand.setIsActive(Client obj, int index) {
        Boolean isActive = Boolean.TRUE;
        obj.setIsActive(isActive);
    }
    
    public void ClientDataOnDemand.setLastModifiedBy(Client obj, int index) {
        AbstractUser lastModifiedBy = null;
        obj.setLastModifiedBy(lastModifiedBy);
    }
    
    public void ClientDataOnDemand.setLastModifiedDate(Client obj, int index) {
        DateTime lastModifiedDate = null;
        obj.setLastModifiedDate(lastModifiedDate);
    }
    
    public void ClientDataOnDemand.setLastName(Client obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 100) {
            lastName = lastName.substring(0, 100);
        }
        obj.setLastName(lastName);
    }
    
    public void ClientDataOnDemand.setUserName(Client obj, int index) {
        String userName = "userName_" + index;
        if (userName.length() > 80) {
            userName = userName.substring(0, 80);
        }
        obj.setUserName(userName);
    }
    
    public Client ClientDataOnDemand.getSpecificClient(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Client obj = data.get(index);
        Long id = obj.getId();
        return clientService.findClient(id);
    }
    
    public Client ClientDataOnDemand.getRandomClient() {
        init();
        Client obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return clientService.findClient(id);
    }
    
    public boolean ClientDataOnDemand.modifyClient(Client obj) {
        return false;
    }
    
    public void ClientDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = clientService.findClientEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Client' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Client>();
        for (int i = 0; i < 10; i++) {
            Client obj = getNewTransientClient(i);
            try {
                clientService.saveClient(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            clientRepository.flush();
            data.add(obj);
        }
    }
    
}
