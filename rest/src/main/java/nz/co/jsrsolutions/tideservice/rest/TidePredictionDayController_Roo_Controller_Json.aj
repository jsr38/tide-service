// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nz.co.jsrsolutions.tideservice.rest;

import java.util.List;
import nz.co.jsrsolutions.tideservice.core.domain.TidePredictionDay;
import nz.co.jsrsolutions.tideservice.core.service.TidePredictionDayService;
import nz.co.jsrsolutions.tideservice.rest.TidePredictionDayController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect TidePredictionDayController_Roo_Controller_Json {
    
    @Autowired
    TidePredictionDayService TidePredictionDayController.tidePredictionDayService;
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TidePredictionDayController.showJson(@PathVariable("id") Long id) {
        TidePredictionDay tidePredictionDay = tidePredictionDayService.findTidePredictionDay(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (tidePredictionDay == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(tidePredictionDay.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TidePredictionDayController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<TidePredictionDay> result = tidePredictionDayService.findAllTidePredictionDays();
        return new ResponseEntity<String>(TidePredictionDay.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> TidePredictionDayController.createFromJson(@RequestBody String json) {
        TidePredictionDay tidePredictionDay = TidePredictionDay.fromJsonToTidePredictionDay(json);
        tidePredictionDayService.saveTidePredictionDay(tidePredictionDay);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> TidePredictionDayController.createFromJsonArray(@RequestBody String json) {
        for (TidePredictionDay tidePredictionDay: TidePredictionDay.fromJsonArrayToTidePredictionDays(json)) {
            tidePredictionDayService.saveTidePredictionDay(tidePredictionDay);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> TidePredictionDayController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        TidePredictionDay tidePredictionDay = TidePredictionDay.fromJsonToTidePredictionDay(json);
        if (tidePredictionDayService.updateTidePredictionDay(tidePredictionDay) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> TidePredictionDayController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (TidePredictionDay tidePredictionDay: TidePredictionDay.fromJsonArrayToTidePredictionDays(json)) {
            if (tidePredictionDayService.updateTidePredictionDay(tidePredictionDay) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> TidePredictionDayController.deleteFromJson(@PathVariable("id") Long id) {
        TidePredictionDay tidePredictionDay = tidePredictionDayService.findTidePredictionDay(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (tidePredictionDay == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        tidePredictionDayService.deleteTidePredictionDay(tidePredictionDay);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
